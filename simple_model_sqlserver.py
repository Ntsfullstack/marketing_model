#!/usr/bin/env python3
"""
H·ªá th·ªëng Qu·∫£n l√Ω Khuy·∫øn m√£i v·ªõi AI - Phi√™n b·∫£n SQL Server
S·ª≠ d·ª•ng SQL Server thay v√¨ SQLite
"""

import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime, timedelta
import pyodbc
from sqlserver_config import SQLSERVER_CONFIG

# Import AI models
from ai_models import PromotionAnalyzer

class PromotionManager:
    def __init__(self):
        self.data_folder = "data"
        self.config = SQLSERVER_CONFIG
        self.ai_analyzer = PromotionAnalyzer()
        
        # T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
        if not os.path.exists(self.data_folder):
            os.makedirs(self.data_folder)
        
        # Setup database
        self.setup_database()
        
        # Load d·ªØ li·ªáu
        self.load_data_from_excel()
        
        # Train AI models
        self.train_ai_models()
    
    def create_connection_string(self):
        """T·∫°o connection string cho SQL Server"""
        config = self.config.copy()
        
        # T·∫°o connection string
        conn_str = f"DRIVER={{{config['driver']}}};"
        conn_str += f"SERVER={config['server']};"
        conn_str += f"PORT={config['port']};"
        
        if 'trusted_connection' in config and config['trusted_connection'] == 'yes':
            conn_str += "Trusted_Connection=yes;"
        else:
            conn_str += f"UID={config.get('uid', 'sa')};"
            conn_str += f"PWD={config.get('pwd', '')};"
        
        conn_str += f"DATABASE={config['database']};"
        return conn_str
    
    def setup_database(self):
        """Setup SQL Server database"""
        try:
            print("üîß Thi·∫øt l·∫≠p SQL Server Database...")
            
            # K·∫øt n·ªëi ƒë·∫øn SQL Server
            conn_str = self.create_connection_string()
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()
            
            # Ki·ªÉm tra k·∫øt n·ªëi
            cursor.execute("SELECT @@VERSION")
            version = cursor.fetchone()
            print(f"‚úÖ K·∫øt n·ªëi SQL Server th√†nh c√¥ng!")
            print(f"üìä SQL Server Version: {version[0][:50]}...")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi SQL Server: {e}")
            print("üí° H√£y ch·∫°y: python setup_sqlserver.py ƒë·ªÉ setup database")
            sys.exit(1)
    
    def load_data_from_excel(self):
        """Load d·ªØ li·ªáu t·ª´ file Excel v√†o SQL Server"""
        # ƒê∆∞·ªùng d·∫´n file Excel
        excel_file = os.path.join(self.data_folder, "rich_sample_data.xlsx")
        
        if not os.path.exists(excel_file):
            print(f"‚ùå File Excel kh√¥ng t·ªìn t·∫°i: {excel_file}")
            print("üí° H√£y t·∫°o file Excel m·∫´u tr∆∞·ªõc")
            return
        
        try:
            print(f"üìä Load d·ªØ li·ªáu t·ª´ Excel: {excel_file}")
            
            # K·∫øt n·ªëi ƒë·∫øn database
            conn_str = self.create_connection_string()
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()
            
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel
            products_df = pd.read_excel(excel_file, sheet_name='Products')
            promotions_df = pd.read_excel(excel_file, sheet_name='Promotions')
            sales_df = pd.read_excel(excel_file, sheet_name='Sales')
            
            # X√≥a d·ªØ li·ªáu c≈©
            cursor.execute("DELETE FROM sales")
            cursor.execute("DELETE FROM promotions")
            cursor.execute("DELETE FROM products")
            cursor.execute("DBCC CHECKIDENT ('products', RESEED, 0)")
            cursor.execute("DBCC CHECKIDENT ('promotions', RESEED, 0)")
            cursor.execute("DBCC CHECKIDENT ('sales', RESEED, 0)")
            
            # Th√™m d·ªØ li·ªáu Products
            for _, row in products_df.iterrows():
                cursor.execute("""
                    INSERT INTO products (name, price, category) 
                    VALUES (?, ?, ?)
                """, (row['name'], row['price'], row['category']))
            
            # Th√™m d·ªØ li·ªáu Promotions
            for _, row in promotions_df.iterrows():
                cursor.execute("""
                    INSERT INTO promotions (name, discount, product_id, active) 
                    VALUES (?, ?, ?, ?)
                """, (row['name'], row['discount'], row['product_id'], row['active']))
            
            # Th√™m d·ªØ li·ªáu Sales
            for _, row in sales_df.iterrows():
                cursor.execute("""
                    INSERT INTO sales (product_id, promotion_id, quantity, revenue, date) 
                    VALUES (?, ?, ?, ?, ?)
                """, (row['product_id'], row['promotion_id'], row['quantity'], row['revenue'], row['date']))
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ ƒê√£ load {len(products_df)} s·∫£n ph·∫©m")
            print(f"‚úÖ ƒê√£ load {len(promotions_df)} khuy·∫øn m√£i")
            print(f"‚úÖ ƒê√£ load {len(sales_df)} giao d·ªãch")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi load d·ªØ li·ªáu: {e}")
    
    def get_all_data(self):
        """L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ SQL Server"""
        try:
            conn_str = self.create_connection_string()
            conn = pyodbc.connect(conn_str)
            
            # L·∫•y d·ªØ li·ªáu t·ª´ c√°c b·∫£ng
            products_df = pd.read_sql("SELECT * FROM products", conn)
            promotions_df = pd.read_sql("SELECT * FROM promotions", conn)
            sales_df = pd.read_sql("SELECT * FROM sales", conn)
            
            conn.close()
            
            return products_df, promotions_df, sales_df
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu: {e}")
            return None, None, None
    
    def train_ai_models(self):
        """Train AI models v·ªõi d·ªØ li·ªáu t·ª´ SQL Server"""
        print("üöÄ Training AI Models...")
        print("=" * 50)
        
        # L·∫•y d·ªØ li·ªáu
        products_df, promotions_df, sales_df = self.get_all_data()
        
        if products_df is None or promotions_df is None or sales_df is None:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ƒë·ªÉ train models")
            return
        
        # Train AI models
        self.ai_analyzer.train_models(products_df, promotions_df, sales_df)
    
    def show_data(self):
        """Hi·ªÉn th·ªã t·∫•t c·∫£ d·ªØ li·ªáu"""
        products_df, promotions_df, sales_df = self.get_all_data()
        
        if products_df is None:
            return
        
        print("\nüì¶ PRODUCTS:")
        print(products_df.to_string(index=False))
        
        print("\nüéØ PROMOTIONS:")
        print(promotions_df.to_string(index=False))
        
        print("\nüí∞ SALES:")
        print(sales_df.head(10).to_string(index=False))
        if len(sales_df) > 10:
            print(f"... v√† {len(sales_df) - 10} records kh√°c")
    
    def add_data(self):
        """Th√™m d·ªØ li·ªáu m·ªõi"""
        print("\n‚ûï TH√äM D·ªÆ LI·ªÜU M·ªöI")
        print("1. Th√™m s·∫£n ph·∫©m")
        print("2. Th√™m khuy·∫øn m√£i")
        print("3. Th√™m giao d·ªãch")
        
        choice = input("Ch·ªçn lo·∫°i d·ªØ li·ªáu (1-3): ")
        
        try:
            conn_str = self.create_connection_string()
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()
            
            if choice == "1":
                name = input("T√™n s·∫£n ph·∫©m: ")
                price = float(input("Gi√°: "))
                category = input("Danh m·ª•c: ")
                
                cursor.execute("""
                    INSERT INTO products (name, price, category) 
                    VALUES (?, ?, ?)
                """, (name, price, category))
                
                print("‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m!")
                
            elif choice == "2":
                name = input("T√™n khuy·∫øn m√£i: ")
                discount = float(input("Gi·∫£m gi√° (%): "))
                product_id = int(input("ID s·∫£n ph·∫©m: "))
                
                cursor.execute("""
                    INSERT INTO promotions (name, discount, product_id, active) 
                    VALUES (?, ?, ?, ?)
                """, (name, discount, product_id, True))
                
                print("‚úÖ ƒê√£ th√™m khuy·∫øn m√£i!")
                
            elif choice == "3":
                product_id = int(input("ID s·∫£n ph·∫©m: "))
                promotion_id = input("ID khuy·∫øn m√£i (Enter ƒë·ªÉ b·ªè tr·ªëng): ")
                quantity = int(input("S·ªë l∆∞·ª£ng: "))
                revenue = float(input("Doanh thu: "))
                date = input("Ng√†y (YYYY-MM-DD): ")
                
                promotion_id = int(promotion_id) if promotion_id else None
                
                cursor.execute("""
                    INSERT INTO sales (product_id, promotion_id, quantity, revenue, date) 
                    VALUES (?, ?, ?, ?, ?)
                """, (product_id, promotion_id, quantity, revenue, date))
                
                print("‚úÖ ƒê√£ th√™m giao d·ªãch!")
            
            conn.commit()
            conn.close()
            
            # Train l·∫°i AI models
            self.train_ai_models()
            
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
    
    def basic_analysis(self):
        """Ph√¢n t√≠ch c∆° b·∫£n"""
        products_df, promotions_df, sales_df = self.get_all_data()
        
        if products_df is None:
            return
        
        print("\nüìä PH√ÇN T√çCH C∆† B·∫¢N")
        print("=" * 30)
        
        # Th·ªëng k√™ t·ªïng quan
        total_revenue = sales_df['revenue'].sum()
        total_sales = len(sales_df)
        avg_revenue = sales_df['revenue'].mean()
        
        print(f"üí∞ T·ªïng doanh thu: ${total_revenue:,.2f}")
        print(f"üìà T·ªïng giao d·ªãch: {total_sales}")
        print(f"üìä Doanh thu trung b√¨nh: ${avg_revenue:,.2f}")
        
        # Doanh thu theo s·∫£n ph·∫©m
        print("\nüèÜ TOP S·∫¢N PH·∫®M:")
        product_revenue = sales_df.groupby('product_id')['revenue'].sum().sort_values(ascending=False)
        for product_id, revenue in product_revenue.head(5).items():
            product_name = products_df[products_df['id'] == product_id]['name'].iloc[0]
            print(f"   {product_name}: ${revenue:,.2f}")
        
        # Doanh thu theo khuy·∫øn m√£i
        print("\nüéØ HI·ªÜU QU·∫¢ KHUY·∫æN M√ÉI:")
        promo_sales = sales_df[sales_df['promotion_id'].notna()]
        if len(promo_sales) > 0:
            promo_revenue = promo_sales.groupby('promotion_id')['revenue'].sum().sort_values(ascending=False)
            for promo_id, revenue in promo_revenue.head(3).items():
                promo_name = promotions_df[promotions_df['id'] == promo_id]['name'].iloc[0]
                print(f"   {promo_name}: ${revenue:,.2f}")
    
    def ai_analysis(self):
        """Ph√¢n t√≠ch AI"""
        while True:
            print("\nü§ñ AI ANALYSIS")
            print("1. Revenue Prediction")
            print("2. Promotion Success Analysis")
            print("3. Time Series Forecasting")
            print("4. Price Optimization")
            print("5. Back to Main Menu")
            
            choice = input("Ch·ªçn ph√¢n t√≠ch (1-5): ")
            
            if choice == "1":
                self.ai_analyzer.revenue_prediction()
            elif choice == "2":
                self.ai_analyzer.promotion_success_analysis()
            elif choice == "3":
                self.ai_analyzer.time_series_forecasting()
            elif choice == "4":
                self.ai_analyzer.price_optimization()
            elif choice == "5":
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
    
    def export_to_excel(self):
        """Xu·∫•t d·ªØ li·ªáu ra Excel"""
        products_df, promotions_df, sales_df = self.get_all_data()
        
        if products_df is None:
            return
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"exported_data_{timestamp}.xlsx"
        filepath = os.path.join(self.data_folder, filename)
        
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            products_df.to_excel(writer, sheet_name='Products', index=False)
            promotions_df.to_excel(writer, sheet_name='Promotions', index=False)
            sales_df.to_excel(writer, sheet_name='Sales', index=False)
        
        print(f"‚úÖ ƒê√£ xu·∫•t d·ªØ li·ªáu ra: {filepath}")
    
    def run(self):
        """Ch·∫°y h·ªá th·ªëng"""
        print("üöÄ H·ªá th·ªëng Qu·∫£n l√Ω Khuy·∫øn m√£i v·ªõi AI - SQL Server")
        print("=" * 60)
        
        while True:
            print("\nüéÆ MENU CH√çNH")
            print("1. Xem d·ªØ li·ªáu")
            print("2. Th√™m d·ªØ li·ªáu")
            print("3. Ph√¢n t√≠ch c∆° b·∫£n")
            print("4. AI Analysis")
            print("5. Export Excel")
            print("6. Tho√°t")
            
            choice = input("\nCh·ªçn ch·ª©c nƒÉng (1-6): ")
            
            if choice == "1":
                self.show_data()
            elif choice == "2":
                self.add_data()
            elif choice == "3":
                self.basic_analysis()
            elif choice == "4":
                self.ai_analysis()
            elif choice == "5":
                self.export_to_excel()
            elif choice == "6":
                print("üëã T·∫°m bi·ªát!")
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")

if __name__ == "__main__":
    manager = PromotionManager()
    manager.run() 