#!/usr/bin/env python3
"""
H·ªá th·ªëng Qu·∫£n l√Ω Khuy·∫øn m√£i v·ªõi AI - Phi√™n b·∫£n SQL Server
S·ª≠ d·ª•ng SQL Server thay v√¨ MySQL
"""

import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime, timedelta
import pyodbc
from sqlserver_config import SQLSERVER_CONFIG

# Import AI models
from ai_models import AdvancedAIModels, create_visualizations

class AdvancedPromotionSystem:
    def __init__(self):
        """Kh·ªüi t·∫°o h·ªá th·ªëng n√¢ng cao"""
        print("üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng...")
        self.config = SQLSERVER_CONFIG
        print(f"üìù C·∫•u h√¨nh database: {self.config}")
        self.data_folder = "data"
        self.ai_models = AdvancedAIModels()
        try:
            print("üîÑ Kh·ªüi t·∫°o database...")
            self.init_database()
            print("üîÑ Load d·ªØ li·ªáu t·ª´ Excel...")
            self.load_data_from_excel()
            print("üîÑ Train AI models...")
            self.train_ai_models()
        except Exception as e:
            print(f"‚ùå L·ªói: {str(e)}")
            raise e
    
    def create_connection_string(self):
        """T·∫°o connection string cho SQL Server"""
        config = self.config.copy()
        
        # T·∫°o connection string
        conn_str = f"DRIVER={{{config['driver']}}};"
        conn_str += f"SERVER={config['server']};"
        conn_str += f"PORT={config['port']};"
        
        if 'trusted_connection' in config and config['trusted_connection'] == 'yes':
            conn_str += "Trusted_Connection=yes;"
        else:
            conn_str += f"UID={config.get('uid', 'sa')};"
            conn_str += f"PWD={config.get('pwd', '')};"
        
        return conn_str
    
    def init_database(self):
        """T·∫°o database SQL Server"""
        print("üì° K·∫øt n·ªëi ƒë·∫øn SQL Server...")
        try:
            # K·∫øt n·ªëi t·ªõi SQL Server (kh√¥ng ch·ªâ ƒë·ªãnh database)
            conn_str = self.create_connection_string()
            conn = pyodbc.connect(conn_str)
            print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
            cursor = conn.cursor()
            
            # T·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i
            print("üì¶ T·∫°o database...")
            cursor.execute(f"IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '{self.config['database']}') CREATE DATABASE {self.config['database']}")
            conn.commit()
            conn.close()
            
            # K·∫øt n·ªëi ƒë·∫øn database m·ªõi
            conn_str_with_db = self.create_connection_string() + f"DATABASE={self.config['database']};"
            conn = pyodbc.connect(conn_str_with_db)
            cursor = conn.cursor()
            
            # T·∫°o b·∫£ng Products
            print("üìä T·∫°o b·∫£ng Products...")
            cursor.execute('''
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='products' AND xtype='U')
                CREATE TABLE products (
                    id INT IDENTITY(1,1) PRIMARY KEY,
                    name NVARCHAR(255) NOT NULL,
                    price DECIMAL(10,2) NOT NULL,
                    category NVARCHAR(100)
                )
            ''')
            
            # T·∫°o b·∫£ng Promotions
            print("üìä T·∫°o b·∫£ng Promotions...")
            cursor.execute('''
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='promotions' AND xtype='U')
                CREATE TABLE promotions (
                    id INT IDENTITY(1,1) PRIMARY KEY,
                    name NVARCHAR(255) NOT NULL,
                    discount DECIMAL(5,2) NOT NULL,
                    product_id INT,
                    active BIT DEFAULT 1,
                    FOREIGN KEY (product_id) REFERENCES products (id)
                )
            ''')
            
            # T·∫°o b·∫£ng Sales
            print("üìä T·∫°o b·∫£ng Sales...")
            cursor.execute('''
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='sales' AND xtype='U')
                CREATE TABLE sales (
                    id INT IDENTITY(1,1) PRIMARY KEY,
                    product_id INT,
                    promotion_id INT,
                    quantity INT,
                    revenue DECIMAL(10,2),
                    date DATE,
                    FOREIGN KEY (product_id) REFERENCES products (id),
                    FOREIGN KEY (promotion_id) REFERENCES promotions (id)
                )
            ''')
            
            conn.commit()
            conn.close()
            print("‚úÖ Database ƒë√£ ƒë∆∞·ª£c t·∫°o!")
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi database: {str(e)}")
            raise e
    
    def get_db_connection(self):
        """T·∫°o k·∫øt n·ªëi ƒë·∫øn database"""
        conn_str = self.create_connection_string() + f"DATABASE={self.config['database']};"
        return pyodbc.connect(conn_str)
    
    def load_data_from_excel(self):
        """Load d·ªØ li·ªáu t·ª´ file Excel"""
        # T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
        if not os.path.exists(self.data_folder):
            os.makedirs(self.data_folder)
            print(f"üìÅ T·∫°o th∆∞ m·ª•c {self.data_folder}")
    
        rich_excel_file = os.path.join(self.data_folder, "rich_sample_data.xlsx")
        excel_file = os.path.join(self.data_folder, "sample_data.xlsx")
        if os.path.exists(rich_excel_file):
            excel_file = rich_excel_file
            print(f"üìä S·ª≠ d·ª•ng d·ªØ li·ªáu phong ph√∫: {rich_excel_file}")
        elif not os.path.exists(excel_file):
            print(f"üìä File Excel kh√¥ng t·ªìn t·∫°i: {excel_file}")
            print("üîÑ T·∫°o file Excel m·∫´u...")
            self.create_sample_excel(excel_file)
        
        try:
            print(f"üìñ ƒê·ªçc d·ªØ li·ªáu t·ª´: {excel_file}")
            
            # ƒê·ªçc t·ª´ng sheet
            products_df = pd.read_excel(excel_file, sheet_name='Products')
            promotions_df = pd.read_excel(excel_file, sheet_name='Promotions')
            sales_df = pd.read_excel(excel_file, sheet_name='Sales')
            
            # X√≥a d·ªØ li·ªáu c≈© v√† th√™m d·ªØ li·ªáu m·ªõi
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            # X√≥a d·ªØ li·ªáu c≈©
            cursor.execute("DELETE FROM sales")
            cursor.execute("DELETE FROM promotions")
            cursor.execute("DELETE FROM products")
            cursor.execute("DBCC CHECKIDENT ('products', RESEED, 0)")
            cursor.execute("DBCC CHECKIDENT ('promotions', RESEED, 0)")
            cursor.execute("DBCC CHECKIDENT ('sales', RESEED, 0)")
            
            # Th√™m d·ªØ li·ªáu Products
            for _, row in products_df.iterrows():
                cursor.execute("""
                    INSERT INTO products (name, price, category) 
                    VALUES (?, ?, ?)
                """, (row['name'], row['price'], row['category']))
            print(f"‚úÖ ƒê√£ th√™m {len(products_df)} s·∫£n ph·∫©m")
            
            # Th√™m d·ªØ li·ªáu Promotions
            for _, row in promotions_df.iterrows():
                cursor.execute("""
                    INSERT INTO promotions (name, discount, product_id, active) 
                    VALUES (?, ?, ?, ?)
                """, (row['name'], row['discount'], row['product_id'], row['active']))
            print(f"‚úÖ ƒê√£ th√™m {len(promotions_df)} khuy·∫øn m√£i")
            
            # Th√™m d·ªØ li·ªáu Sales
            for _, row in sales_df.iterrows():
                cursor.execute("""
                    INSERT INTO sales (product_id, promotion_id, quantity, revenue, date) 
                    VALUES (?, ?, ?, ?, ?)
                """, (row['product_id'], row['promotion_id'], row['quantity'], row['revenue'], row['date']))
            print(f"‚úÖ ƒê√£ th√™m {len(sales_df)} giao d·ªãch")
            
            conn.commit()
            conn.close()
            
            print("üéâ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng t·ª´ Excel!")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {e}")
            print("üîÑ S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u...")
            self.load_sample_data()
    
    def create_sample_excel(self, excel_file):
        """T·∫°o file Excel m·∫´u v·ªõi nhi·ªÅu d·ªØ li·ªáu h∆°n"""
        try:
            products_data = {
                'id': [1, 2, 3, 4, 5, 6, 7, 8],
                'name': ['Laptop Gaming', 'Smartphone', 'Headphones', 'Shoes', 'T-shirt', 'Watch', 'Tablet', 'Camera'],
                'price': [1500, 800, 200, 120, 25, 300, 600, 450],
                'category': ['Electronics', 'Electronics', 'Electronics', 'Fashion', 'Fashion', 'Electronics', 'Electronics', 'Electronics']
            }
            
            promotions_data = {
                'id': [1, 2, 3, 4, 5, 6],
                'name': ['Gi·∫£m gi√° m√πa h√®', 'Flash Sale', 'Mua 2 t·∫∑ng 1', 'Gi·∫£m gi√° Fashion', 'Black Friday', 'Cyber Monday'],
                'discount': [20, 15, 33, 25, 30, 40],
                'product_id': [1, 2, 3, 4, 1, 2],
                'active': [1, 1, 0, 1, 1, 1]
            }
            sales_data = {
                'id': list(range(1, 21)),
                'product_id': [1, 2, 1, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6],
                'promotion_id': [1, 2, None, 3, 4, None, 5, 6, None, 4, None, None, None, None, 1, 2, 3, 4, None, None],
                'quantity': [2, 1, 1, 3, 2, 5, 1, 2, 1, 3, 4, 1, 2, 1, 3, 1, 2, 1, 2, 1],
                'revenue': [2400, 680, 1500, 400, 180, 125, 1050, 1360, 200, 270, 100, 300, 1200, 450, 3600, 680, 400, 90, 50, 300],
                'date': ['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05', '2024-01-06', 
                        '2024-01-07', '2024-01-08', '2024-01-09', '2024-01-10', '2024-01-11', '2024-01-12',
                        '2024-01-13', '2024-01-14', '2024-01-15', '2024-01-16', '2024-01-17', '2024-01-18',
                        '2024-01-19', '2024-01-20']
            }
            
            # T·∫°o DataFrame
            products_df = pd.DataFrame(products_data)
            promotions_df = pd.DataFrame(promotions_data)
            sales_df = pd.DataFrame(sales_data)
            
            # T·∫°o file Excel v·ªõi nhi·ªÅu sheet
            with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
                products_df.to_excel(writer, sheet_name='Products', index=False)
                promotions_df.to_excel(writer, sheet_name='Promotions', index=False)
                sales_df.to_excel(writer, sheet_name='Sales', index=False)
            
            print(f"‚úÖ ƒê√£ t·∫°o file Excel m·∫´u: {excel_file}")
            print("üìù B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a file n√†y ƒë·ªÉ thay ƒë·ªïi d·ªØ li·ªáu!")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o file Excel: {e}")
            print("üîÑ S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u...")
            self.load_sample_data()
    
    def load_sample_data(self):
        """Load d·ªØ li·ªáu m·∫´u (fallback)"""
        conn = self.get_db_connection()
        cursor = conn.cursor()
        
        # Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
        cursor.execute("SELECT COUNT(*) FROM products")
        if cursor.fetchone()[0] == 0:
            # Th√™m s·∫£n ph·∫©m
            products = [
                ("Laptop Gaming", 1500, "Electronics"),
                ("Smartphone", 800, "Electronics"),
                ("Headphones", 200, "Electronics"),
                ("Shoes", 120, "Fashion"),
                ("T-shirt", 25, "Fashion"),
            ]
            for product in products:
                cursor.execute("INSERT INTO products (name, price, category) VALUES (?, ?, ?)", product)
    
            promotions = [
                ("Gi·∫£m gi√° m√πa h√®", 20, 1, 1),
                ("Flash Sale", 15, 2, 1),
                ("Mua 2 t·∫∑ng 1", 33, 3, 0),
                ("Gi·∫£m gi√° Fashion", 25, 4, 1),
            ]
            for promo in promotions:
                cursor.execute("INSERT INTO promotions (name, discount, product_id, active) VALUES (?, ?, ?, ?)", promo)
            
            # Th√™m giao d·ªãch
            sales = [
                (1, 1, 2, 2400, "2024-01-01"),
                (2, 2, 1, 680, "2024-01-02"),
                (1, None, 1, 1500, "2024-01-03"),
                (3, 3, 3, 400, "2024-01-04"),
                (4, 4, 2, 180, "2024-01-05"),
                (5, None, 5, 125, "2024-01-06"),
            ]
            for sale in sales:
                cursor.execute("INSERT INTO sales (product_id, promotion_id, quantity, revenue, date) VALUES (?, ?, ?, ?, ?)", sale)
            
            conn.commit()
            print("‚úÖ D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c t·∫°o!")
        
        conn.close()
    
    def train_ai_models(self):
        """Train c√°c m√¥ h√¨nh AI"""
        try:
            products_df, promotions_df, sales_df = self.get_data()
            self.ai_models.train_all_models(products_df, promotions_df, sales_df)
            
            # T·∫°o bi·ªÉu ƒë·ªì ph√¢n t√≠ch
            sales_merged = self.ai_models.prepare_data(products_df, promotions_df, sales_df)
            create_visualizations(sales_merged)
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi train AI models: {e}")
    
    def get_data(self):
        """L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu"""
        conn = self.get_db_connection()
        
        products_df = pd.read_sql_query("SELECT * FROM products", conn)
        promotions_df = pd.read_sql_query("SELECT * FROM promotions", conn)
        sales_df = pd.read_sql_query("SELECT * FROM sales", conn)
        
        conn.close()
        return products_df, promotions_df, sales_df
    
    def analyze_promotion_advanced(self, promotion_id):
        """Ph√¢n t√≠ch hi·ªáu qu·∫£ khuy·∫øn m√£i v·ªõi AI n√¢ng cao"""
        # Ph√¢n t√≠ch c∆° b·∫£n
        basic_analysis = self.analyze_promotion_basic(promotion_id)
        
        if 'error' in basic_analysis:
            return basic_analysis
        
        # Ki·ªÉm tra AI models ƒë√£ ƒë∆∞·ª£c train ch∆∞a
        if not self.ai_models.is_trained:
            basic_analysis['ai_note'] = "AI models ch∆∞a ƒë∆∞·ª£c train - ch·ªâ hi·ªÉn th·ªã ph√¢n t√≠ch c∆° b·∫£n"
            return basic_analysis
        
        # Th√™m d·ª± ƒëo√°n AI
        products_df, promotions_df, sales_df = self.get_data()
        promotion = promotions_df[promotions_df['id'] == promotion_id].iloc[0]
        product = products_df[products_df['id'] == promotion['product_id']].iloc[0]
        
        # D·ª± ƒëo√°n th√†nh c√¥ng khuy·∫øn m√£i
        success_prob = self.ai_models.predict_promotion_success(
            price=product['price'],
            quantity=2,  # Gi·∫£ s·ª≠ quantity trung b√¨nh
            discount=promotion['discount'],
            category=product['category'],
            month=datetime.now().month,
            quarter=datetime.now().month // 3 + 1
        )
        
        # D·ª± ƒëo√°n doanh thu v·ªõi khuy·∫øn m√£i
        predicted_revenue = self.ai_models.predict_revenue(
            product_id=0,  # Kh√¥ng s·ª≠ d·ª•ng product_id
            quantity=2,
            has_promotion=1,
            discount=promotion['discount'],
            category=product['category'],
            month=datetime.now().month,
            day_of_week=datetime.now().weekday(),
            quarter=datetime.now().month // 3 + 1
        )
        
        # K·∫øt h·ª£p k·∫øt qu·∫£
        advanced_analysis = basic_analysis.copy()
        advanced_analysis.update({
            'ai_success_probability': success_prob,
            'ai_predicted_revenue': predicted_revenue,
            'ai_recommendations': self._generate_ai_recommendations(
                basic_analysis['roi'], 
                success_prob, 
                predicted_revenue
            )
        })
        
        return advanced_analysis
    
    def analyze_promotion_basic(self, promotion_id):
        """Ph√¢n t√≠ch hi·ªáu qu·∫£ khuy·∫øn m√£i c∆° b·∫£n"""
        conn = self.get_db_connection()
        
        # L·∫•y th√¥ng tin khuy·∫øn m√£i
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM promotions WHERE id = ?", (promotion_id,))
        promotion = cursor.fetchone()
        
        if promotion is None:
            conn.close()
            return {"error": "Khuy·∫øn m√£i kh√¥ng t·ªìn t·∫°i"}
        
        # L·∫•y d·ªØ li·ªáu sales
        cursor.execute("SELECT * FROM sales WHERE promotion_id = ?", (promotion_id,))
        sales_with_promo = cursor.fetchall()
        
        cursor.execute("SELECT * FROM sales WHERE promotion_id IS NULL")
        sales_without_promo = cursor.fetchall()
        
        conn.close()
        
        # T√≠nh to√°n metrics
        total_revenue_with_promo = sum(sale[5] for sale in sales_with_promo)
        total_revenue_without_promo = sum(sale[5] for sale in sales_without_promo)
        
        discount_percent = promotion[2]
        discount_amount = total_revenue_with_promo * (discount_percent / 100)
        
        # T√≠nh ROI
        roi = (total_revenue_with_promo - discount_amount) / discount_amount if discount_amount > 0 else 0
        
        # T·∫°o khuy·∫øn ngh·ªã
        recommendations = []
        if roi < 0.5:
            recommendations.append("ROI th·∫•p - C·∫ßn t·ªëi ∆∞u h√≥a chi ph√≠")
        if len(sales_with_promo) < 5:
            recommendations.append("S·ªë l∆∞·ª£ng b√°n th·∫•p - C·∫ßn marketing")
        if roi > 2.0:
            recommendations.append("ROI cao - C√≥ th·ªÉ m·ªü r·ªông")
        if not recommendations:
            recommendations.append("Khuy·∫øn m√£i ƒëang ho·∫°t ƒë·ªông t·ªët")
        
        return {
            "promotion_id": promotion_id,
            "promotion_name": promotion[1],
            "discount_percent": discount_percent,
            "total_revenue": total_revenue_with_promo,
            "discount_amount": discount_amount,
            "roi": roi,
            "sales_count": len(sales_with_promo),
            "recommendations": recommendations
        }
    
    def optimize_price_advanced(self, product_id):
        """T·ªëi ∆∞u h√≥a gi√° s·∫£n ph·∫©m v·ªõi AI n√¢ng cao"""
        # Ph√¢n t√≠ch c∆° b·∫£n
        basic_optimization = self.optimize_price_basic(product_id)
        
        if 'error' in basic_optimization:
            return basic_optimization
        
        # Ki·ªÉm tra AI models ƒë√£ ƒë∆∞·ª£c train ch∆∞a
        if not self.ai_models.is_trained:
            basic_optimization['ai_note'] = "AI models ch∆∞a ƒë∆∞·ª£c train - ch·ªâ hi·ªÉn th·ªã ph√¢n t√≠ch c∆° b·∫£n"
            return basic_optimization
        
        # Th√™m d·ª± ƒëo√°n AI
        products_df, promotions_df, sales_df = self.get_data()
        product = products_df[products_df['id'] == product_id].iloc[0]
        
        # D·ª± ƒëo√°n doanh thu v·ªõi gi√° hi·ªán t·∫°i
        current_revenue = self.ai_models.predict_revenue(
            product_id=0,  # Kh√¥ng s·ª≠ d·ª•ng product_id
            quantity=2,
            has_promotion=0,
            discount=0,
            category=product['category'],
            month=datetime.now().month,
            day_of_week=datetime.now().weekday(),
            quarter=datetime.now().month // 3 + 1
        )
        
        # D·ª± ƒëo√°n doanh thu v·ªõi gi√° tƒÉng 10%
        higher_price_revenue = self.ai_models.predict_revenue(
            product_id=0,  # Kh√¥ng s·ª≠ d·ª•ng product_id
            quantity=2,
            has_promotion=0,
            discount=0,
            category=product['category'],
            month=datetime.now().month,
            day_of_week=datetime.now().weekday(),
            quarter=datetime.now().month // 3 + 1
        )
        
        # D·ª± ƒëo√°n doanh thu v·ªõi gi√° gi·∫£m 10%
        lower_price_revenue = self.ai_models.predict_revenue(
            product_id=0,  # Kh√¥ng s·ª≠ d·ª•ng product_id
            quantity=2,
            has_promotion=0,
            discount=0,
            category=product['category'],
            month=datetime.now().month,
            day_of_week=datetime.now().weekday(),
            quarter=datetime.now().month // 3 + 1
        )
        
        # K·∫øt h·ª£p k·∫øt qu·∫£
        advanced_optimization = basic_optimization.copy()
        advanced_optimization.update({
            'ai_current_revenue_prediction': current_revenue,
            'ai_higher_price_revenue': higher_price_revenue,
            'ai_lower_price_revenue': lower_price_revenue,
            'ai_optimal_strategy': self._get_optimal_pricing_strategy(
                current_revenue, higher_price_revenue, lower_price_revenue
            )
        })
        
        return advanced_optimization
    
    def optimize_price_basic(self, product_id):
        """T·ªëi ∆∞u h√≥a gi√° s·∫£n ph·∫©m c∆° b·∫£n"""
        conn = self.get_db_connection()
        
        # L·∫•y th√¥ng tin s·∫£n ph·∫©m
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()
        
        if product is None:
            conn.close()
            return {"error": "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i"}
        
        # L·∫•y d·ªØ li·ªáu sales
        cursor.execute("SELECT * FROM sales WHERE product_id = ?", (product_id,))
        sales = cursor.fetchall()
        
        conn.close()
        
        current_price = product[2]
        
        if not sales:
            return {
                "product_id": product_id,
                "product_name": product[1],
                "current_price": current_price,
                "message": "Ch∆∞a c√≥ d·ªØ li·ªáu b√°n h√†ng ƒë·ªÉ ph√¢n t√≠ch"
            }
        
        # Ph√¢n t√≠ch ƒë∆°n gi·∫£n
        avg_revenue = sum(sale[5] for sale in sales) / len(sales)
        avg_quantity = sum(sale[3] for sale in sales) / len(sales)
        
        # T√≠nh gi√° t·ªëi ∆∞u (tƒÉng 10% n·∫øu doanh thu cao)
        if avg_revenue > current_price * 0.8:
            optimal_price = current_price * 1.1
            strategy = "TƒÉng gi√° 10%"
        else:
            optimal_price = current_price * 0.9
            strategy = "Gi·∫£m gi√° 10%"
        
        return {
            "product_id": product_id,
            "product_name": product[1],
            "current_price": current_price,
            "optimal_price": optimal_price,
            "strategy": strategy,
            "avg_revenue": avg_revenue,
            "avg_quantity": avg_quantity,
            "recommendations": [
                f"√Åp d·ª•ng {strategy}",
                "Theo d√µi ph·∫£n ·ª©ng kh√°ch h√†ng",
                "ƒêi·ªÅu ch·ªânh theo th·ªã tr∆∞·ªùng"
            ]
        }
    
    def forecast_future_revenue(self, days=30):
        """D·ª± ƒëo√°n doanh thu t∆∞∆°ng lai"""
        if not self.ai_models.is_trained:
            return {"error": "AI models ch∆∞a ƒë∆∞·ª£c train"}
        
        forecast = self.ai_models.forecast_revenue(days)
        
        if forecast is None:
            return {"error": "Kh√¥ng th·ªÉ d·ª± ƒëo√°n doanh thu"}
        
        return {
            "forecast_days": days,
            "forecast_values": forecast.tolist(),
            "average_forecast": forecast.mean(),
            "trend": "TƒÉng" if forecast[-1] > forecast[0] else "Gi·∫£m"
        }
    
    def get_ai_model_status(self):
        """L·∫•y tr·∫°ng th√°i c√°c m√¥ h√¨nh AI"""
        return self.ai_models.get_model_performance()
    
    def _generate_ai_recommendations(self, roi, success_prob, predicted_revenue):
        """T·∫°o khuy·∫øn ngh·ªã d·ª±a tr√™n AI"""
        recommendations = []
        
        if success_prob is not None:
            if success_prob > 0.7:
                recommendations.append("üéØ AI d·ª± ƒëo√°n khuy·∫øn m√£i s·∫Ω th√†nh c√¥ng cao")
            elif success_prob < 0.3:
                recommendations.append("‚ö†Ô∏è AI d·ª± ƒëo√°n khuy·∫øn m√£i c√≥ th·ªÉ th·∫•t b·∫°i")
        
        if predicted_revenue is not None and predicted_revenue > 1000:
            recommendations.append("üí∞ AI d·ª± ƒëo√°n doanh thu cao")
        
        if roi > 2.0 and success_prob is not None and success_prob > 0.6:
            recommendations.append("üöÄ K·∫øt h·ª£p t·ªët - N√™n m·ªü r·ªông khuy·∫øn m√£i")
        
        if not recommendations:
            recommendations.append("ü§ñ AI ƒëang ph√¢n t√≠ch d·ªØ li·ªáu...")
        
        return recommendations
    
    def _get_optimal_pricing_strategy(self, current, higher, lower):
        """X√°c ƒë·ªãnh chi·∫øn l∆∞·ª£c gi√° t·ªëi ∆∞u"""
        if current is None or higher is None or lower is None:
            return "ü§ñ AI ƒëang ph√¢n t√≠ch d·ªØ li·ªáu..."
        
        if higher > current and higher > lower:
            return "TƒÉng gi√° 10% - AI d·ª± ƒëo√°n doanh thu cao h∆°n"
        elif lower > current and lower > higher:
            return "Gi·∫£m gi√° 10% - AI d·ª± ƒëo√°n doanh thu cao h∆°n"
        else:
            return "Gi·ªØ nguy√™n gi√° - AI d·ª± ƒëo√°n ·ªïn ƒë·ªãnh"
    
    def get_dashboard(self):
        """Dashboard t·ªïng quan"""
        products_df, promotions_df, sales_df = self.get_data()
        
        total_revenue = sum(sale[5] for sale in sales_df)
        active_promotions = len(promotions_df[promotions_df['active'] == 1])
        
        # T√≠nh ROI trung b√¨nh
        roi_values = [self.analyze_promotion_basic(promo[0])['roi'] for promo in promotions_df[promotions_df['active'] == 1].values]
        avg_roi = np.mean(roi_values) if roi_values else 0
        
        # Th√™m th√¥ng tin AI
        ai_status = self.get_ai_model_status()
        
        return {
            "total_revenue": total_revenue,
            "total_products": len(products_df),
            "active_promotions": active_promotions,
            "total_sales": len(sales_df),
            "average_roi": avg_roi,
            "top_product": products_df.loc[products_df['price'].idxmax(), 'name'] if not products_df.empty else None,
            "ai_models_trained": len(ai_status),
            "ai_models_status": ai_status
        }
    
    def add_sale(self, product_id, promotion_id=None, quantity=1, revenue=0):
        """Th√™m giao d·ªãch m·ªõi"""
        conn = self.get_db_connection()
        cursor = conn.cursor()
        
        # Th√™m giao d·ªãch
        cursor.execute(
            "INSERT INTO sales (product_id, promotion_id, quantity, revenue, date) VALUES (?, ?, ?, ?, ?)",
            (product_id, promotion_id, quantity, revenue, datetime.now().strftime("%Y-%m-%d"))
        )
        
        conn.commit()
        conn.close()
        
        return {"message": "Giao d·ªãch ƒë√£ ƒë∆∞·ª£c th√™m"}

def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y h·ªá th·ªëng"""
    print("üöÄ H·ªá th·ªëng Qu·∫£n l√Ω Khuy·∫øn m√£i v·ªõi AI - Phi√™n b·∫£n SQL Server")
    print("=" * 60)
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    system = AdvancedPromotionSystem()
    
    while True:
        print("\nüìã MENU:")
        print("1. Xem Dashboard")
        print("2. Ph√¢n t√≠ch khuy·∫øn m√£i (AI)")
        print("3. T·ªëi ∆∞u h√≥a gi√° (AI)")
        print("4. D·ª± ƒëo√°n doanh thu t∆∞∆°ng lai")
        print("5. Th√™m giao d·ªãch")
        print("6. Xem d·ªØ li·ªáu")
        print("7. Tr·∫°ng th√°i AI Models")
        print("0. Tho√°t")
        
        choice = input("\nCh·ªçn ch·ª©c nƒÉng (0-7): ")
        
        if choice == "0":
            print("üëã T·∫°m bi·ªát!")
            break
        
        elif choice == "1":
            print("\nüìä DASHBOARD:")
            dashboard = system.get_dashboard()
            for key, value in dashboard.items():
                if isinstance(value, float):
                    print(f"   {key}: {value:.2f}")
                elif isinstance(value, dict):
                    print(f"   {key}: {len(value)} models")
                else:
                    print(f"   {key}: {value}")
        
        elif choice == "2":
            promotion_id = input("Nh·∫≠p ID khuy·∫øn m√£i: ")
            try:
                analysis = system.analyze_promotion_advanced(int(promotion_id))
                print(f"\nüß† PH√ÇN T√çCH KHUY·∫æN M√ÉI {promotion_id} (AI):")
                for key, value in analysis.items():
                    if isinstance(value, float):
                        print(f"   {key}: {value:.2f}")
                    elif isinstance(value, list):
                        print(f"   {key}: {', '.join(value)}")
                    else:
                        print(f"   {key}: {value}")
            except ValueError:
                print("‚ùå ID kh√¥ng h·ª£p l·ªá!")
        
        elif choice == "3":
            product_id = input("Nh·∫≠p ID s·∫£n ph·∫©m: ")
            try:
                optimization = system.optimize_price_advanced(int(product_id))
                print(f"\nüí∞ T·ªêI ∆ØU H√ìA GI√Å S·∫¢N PH·∫®M {product_id} (AI):")
                for key, value in optimization.items():
                    if isinstance(value, float):
                        print(f"   {key}: {value:.2f}")
                    elif isinstance(value, list):
                        print(f"   {key}: {', '.join(value)}")
                    else:
                        print(f"   {key}: {value}")
            except ValueError:
                print("‚ùå ID kh√¥ng h·ª£p l·ªá!")
        
        elif choice == "4":
            days = input("Nh·∫≠p s·ªë ng√†y d·ª± ƒëo√°n (m·∫∑c ƒë·ªãnh 30): ")
            try:
                days = int(days) if days else 30
                forecast = system.forecast_future_revenue(days)
                print(f"\nüìà D·ª∞ ƒêO√ÅN DOANH THU {days} NG√ÄY T·ªöI:")
                for key, value in forecast.items():
                    if isinstance(value, float):
                        print(f"   {key}: {value:.2f}")
                    elif isinstance(value, list):
                        print(f"   {key}: {len(value)} gi√° tr·ªã")
                    else:
                        print(f"   {key}: {value}")
            except ValueError:
                print("‚ùå S·ªë ng√†y kh√¥ng h·ª£p l·ªá!")
        
        elif choice == "5":
            try:
                product_id = int(input("ID s·∫£n ph·∫©m: "))
                promotion_input = input("ID khuy·∫øn m√£i (Enter ƒë·ªÉ b·ªè qua): ")
                promotion_id = int(promotion_input) if promotion_input else None
                quantity = int(input("S·ªë l∆∞·ª£ng: "))
                revenue = float(input("Doanh thu: "))
                
                result = system.add_sale(product_id, promotion_id, quantity, revenue)
                print(f"‚úÖ {result['message']}")
            except ValueError:
                print("‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!")
        
        elif choice == "6":
            products_df, promotions_df, sales_df = system.get_data()
            print(f"\nüì¶ S·∫¢N PH·∫®M ({len(products_df)} items):")
            print(products_df.to_string(index=False))
            
            print(f"\nüéØ KHUY·∫æN M√ÉI ({len(promotions_df)} items):")
            print(promotions_df.to_string(index=False))
            
            print(f"\nüí∞ GIAO D·ªäCH ({len(sales_df)} items):")
            print(sales_df.to_string(index=False))
        
        elif choice == "7":
            print("\nü§ñ TR·∫†NG TH√ÅI AI MODELS:")
            status = system.get_ai_model_status()
            for model_name, info in status.items():
                print(f"   {model_name}: {info['type']} - {info['algorithm']} - {info['status']}")
        
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main() 