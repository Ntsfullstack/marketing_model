#!/usr/bin/env python3
"""
Script setup SQL Server Database
Ch·∫°y: python setup_sqlserver.py
"""

import pyodbc
import pandas as pd
from sqlserver_config import SQLSERVER_CONFIG, CREATE_DATABASE_SQL, CREATE_TABLES_SQL
import os

def create_connection_string():
    """T·∫°o connection string cho SQL Server"""
    config = SQLSERVER_CONFIG.copy()
    
    # T·∫°o connection string
    conn_str = f"DRIVER={{{config['driver']}}};"
    conn_str += f"SERVER={config['server']};"
    conn_str += f"PORT={config['port']};"
    
    if 'trusted_connection' in config and config['trusted_connection'] == 'yes':
        conn_str += "Trusted_Connection=yes;"
    else:
        conn_str += f"UID={config.get('uid', 'sa')};"
        conn_str += f"PWD={config.get('pwd', '')};"
    
    return conn_str

def setup_database():
    """Setup database v√† tables"""
    try:
        print("üöÄ Thi·∫øt l·∫≠p SQL Server Database...")
        
        # K·∫øt n·ªëi ƒë·∫øn SQL Server (kh√¥ng ch·ªâ ƒë·ªãnh database)
        conn_str = create_connection_string()
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()
        
        # T·∫°o database
        print("üìä T·∫°o database 'promotions_db'...")
        cursor.execute(CREATE_DATABASE_SQL)
        conn.commit()
        print("‚úÖ Database ƒë√£ ƒë∆∞·ª£c t·∫°o!")
        
        # ƒê√≥ng connection c≈©
        conn.close()
        
        # K·∫øt n·ªëi ƒë·∫øn database m·ªõi
        conn_str_with_db = conn_str + f"DATABASE={SQLSERVER_CONFIG['database']};"
        conn = pyodbc.connect(conn_str_with_db)
        cursor = conn.cursor()
        
        # T·∫°o tables
        print("üìã T·∫°o c√°c b·∫£ng...")
        for statement in CREATE_TABLES_SQL.split(';'):
            if statement.strip():
                cursor.execute(statement)
        
        conn.commit()
        print("‚úÖ C√°c b·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o!")
        
        # Ki·ªÉm tra tables
        cursor.execute("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'")
        tables = cursor.fetchall()
        print(f"üìä C√°c b·∫£ng ƒë√£ t·∫°o: {[table[0] for table in tables]}")
        
        conn.close()
        print("üéâ Setup SQL Server Database ho√†n t·∫•t!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi setup database: {e}")
        print("\nüí° H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:")
        print("1. ƒê·∫£m b·∫£o SQL Server ƒëang ch·∫°y")
        print("2. Ki·ªÉm tra connection string trong sqlserver_config.py")
        print("3. ƒê·∫£m b·∫£o ƒë√£ c√†i ODBC Driver cho SQL Server")
        print("4. Ki·ªÉm tra quy·ªÅn truy c·∫≠p database")
        return False

def load_sample_data():
    """Load d·ªØ li·ªáu m·∫´u t·ª´ Excel v√†o SQL Server"""
    try:
        print("\nüìä Load d·ªØ li·ªáu m·∫´u t·ª´ Excel...")
        
        # K·∫øt n·ªëi ƒë·∫øn database
        conn_str = create_connection_string() + f"DATABASE={SQLSERVER_CONFIG['database']};"
        conn = pyodbc.connect(conn_str)
        
        # ƒê∆∞·ªùng d·∫´n file Excel
        excel_file = os.path.join("data", "rich_sample_data.xlsx")
        
        if not os.path.exists(excel_file):
            print(f"‚ùå File Excel kh√¥ng t·ªìn t·∫°i: {excel_file}")
            return False
        
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel
        products_df = pd.read_excel(excel_file, sheet_name='Products')
        promotions_df = pd.read_excel(excel_file, sheet_name='Promotions')
        sales_df = pd.read_excel(excel_file, sheet_name='Sales')
        
        # X√≥a d·ªØ li·ªáu c≈©
        cursor = conn.cursor()
        cursor.execute("DELETE FROM sales")
        cursor.execute("DELETE FROM promotions")
        cursor.execute("DELETE FROM products")
        cursor.execute("DBCC CHECKIDENT ('products', RESEED, 0)")
        cursor.execute("DBCC CHECKIDENT ('promotions', RESEED, 0)")
        cursor.execute("DBCC CHECKIDENT ('sales', RESEED, 0)")
        
        # Th√™m d·ªØ li·ªáu Products
        for _, row in products_df.iterrows():
            cursor.execute("""
                INSERT INTO products (name, price, category) 
                VALUES (?, ?, ?)
            """, (row['name'], row['price'], row['category']))
        
        # Th√™m d·ªØ li·ªáu Promotions
        for _, row in promotions_df.iterrows():
            cursor.execute("""
                INSERT INTO promotions (name, discount, product_id, active) 
                VALUES (?, ?, ?, ?)
            """, (row['name'], row['discount'], row['product_id'], row['active']))
        
        # Th√™m d·ªØ li·ªáu Sales
        for _, row in sales_df.iterrows():
            cursor.execute("""
                INSERT INTO sales (product_id, promotion_id, quantity, revenue, date) 
                VALUES (?, ?, ?, ?, ?)
            """, (row['product_id'], row['promotion_id'], row['quantity'], row['revenue'], row['date']))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ ƒê√£ load {len(products_df)} s·∫£n ph·∫©m")
        print(f"‚úÖ ƒê√£ load {len(promotions_df)} khuy·∫øn m√£i")
        print(f"‚úÖ ƒê√£ load {len(sales_df)} giao d·ªãch")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi load d·ªØ li·ªáu: {e}")
        return False

if __name__ == "__main__":
    print("üéØ Setup SQL Server Database cho H·ªá th·ªëng Qu·∫£n l√Ω Khuy·∫øn m√£i")
    print("=" * 60)
    
    # Setup database
    if setup_database():
        # Load d·ªØ li·ªáu m·∫´u
        load_sample_data()
    
    print("\nüìã H∆∞·ªõng d·∫´n ti·∫øp theo:")
    print("1. C·∫≠p nh·∫≠t sqlserver_config.py n·∫øu c·∫ßn")
    print("2. Ch·∫°y: python simple_model.py")
    print("3. H·ªá th·ªëng s·∫Ω s·ª≠ d·ª•ng SQL Server thay v√¨ SQLite") 